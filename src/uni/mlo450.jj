options
{
  JDK_VERSION = "1.5";
  static = false;
}

PARSER_BEGIN(UniParser)

package uni;

public class UniParser
{
}

PARSER_END(UniParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : 
{
  < UNIVERSITYNAME : "UNIVERSITY" >

| < WEBSITE : "WEBSITE" >
| < URL : "\"http" ("s")? ":" "//" (["a"-"z", "A"-"Z", ".", "/", "_"])+"\"" >

| < EST : "EST" >
| < YEAR : (["0"-"9"]){4} >

| < GPS : "GPS" >
| < DEG : "deg" >
| < EW : ["E", "W"] >
| < NS : ["N", "S"] >
| < SECONDS : "." (["0"-"9"])? (["0"-"9"])? (["0"-"9"])? ["0"-"9"] >

| < FACULTY : "FACULTY" >
| < STUDENTS: "STUDENTS" >
| < STAFF: "STAFF" >
| < CODE : "CODE" >
| < CODENAME : "\"" (["A"-"Z"])+ "\"" >

| < COURSEID : < DIGIT_3 > ["A", "B"] >
| < COURSEPOINTS : (["0"-"9"])? ["0"-"9"] "p" >

| < DIGIT_3 : (["0"-"9"]){3} >
| < DIGIT_2 : (["0"-"9"]){2} >
| < DIGIT : ["0"-"9"] >
| < COMMA : "," >
| < LEFTCURLY : "{" >
| < RIGHTCURLY : "}" >
| < NAME : "\"" (["a"-"z", "A"-"Z", " "])+ "\"" >
| < NUMBER: (["0"-"9"])+ >
}

void University() : {}
{
  < UNIVERSITYNAME > < NAME > < LEFTCURLY >
  UniversityData()
  (Faculty())*
  < RIGHTCURLY >
  < EOF >
}

void UniversityData() : {}
{
 Est()
 Website(false, "")
 GPS()}

void Est() : {}
{
  < EST > < YEAR >
}

void Website(boolean website, String facultyName) : {
  Token t;
}
{
  t = < WEBSITE > < URL >
  {    if (website) {      throw new ParseException("Multiple website entries detected in " + facultyName + " on line " + t.beginLine);
    }
  }
}

void GPS() : {}
{
  < GPS >
  Coordinates()
}

void Coordinates() : {}{
  Longitude()
  < COMMA >
  Latitude() }

void Longitude() : {}{
  Num_3()
  < DEG >
  Num_2()
  Seconds()
  < EW >}

void Latitude() : {}{
  Num_2()
  < DEG >
  Num_2()
  Seconds()
  < NS >}

void Seconds() : {}{
  Num_2()
  (< SECONDS >)?}

void Faculty() : {
  boolean students = false;
  boolean staff = false;
  boolean website = false;
  boolean code = false;
  Token t;
}{
 < FACULTY >
 t = < NAME >
 < LEFTCURLY >

 (Students(students, t.image) {   students = true; } | Staff(staff, t.image) {   staff = true; } | Website(website, t.image) {   website = true;
 } | Code() {   code = true; })*

 {   if (!students) {
     throw new ParseException("No student count found in " + t.image + " on line " + t.beginLine);   } else if (!staff)
   {
     throw new ParseException("No staff count found in " + t.image + " on line " + t.beginLine);
   } else if (!code)
   {
     throw new ParseException("No codes found in " + t.image + " on line " + t.beginLine);
   } }
 

 < RIGHTCURLY >
}

void Students(boolean students, String facultyName) : {
  Token t;
}
{
  t = < STUDENTS >
  Num_General()
  {
    if (students) {
      throw new ParseException("Multiple student counts detected in " + facultyName + " on line " + t.beginLine);
    }
  }
}

void Staff(boolean staff, String facultyName) : {
  Token t;
}
{
  t = < STAFF >
  Num_General()
  {
    if (staff) {
      throw new ParseException("Multiple staff counts detected in " + facultyName + " on line " + t.beginLine);
    }
  }
}

void Code() : {}{
 < CODE >
 < CODENAME >
 < LEFTCURLY >
 (CourseEntry())+
 < RIGHTCURLY >}

void CourseEntry() : {}{
  (< COURSEID > | Num_3())
  < NAME >
  < COURSEPOINTS >}

void Num_3() : {}
{
  (LOOKAHEAD(3)< DIGIT_3 > | LOOKAHEAD(2)< DIGIT_2 > | < DIGIT >)
}

void Num_2() : {}
{
  (LOOKAHEAD(2)< DIGIT_2 > | < DIGIT >)
}

void Num_General() : {}{
  (LOOKAHEAD(5) < NUMBER > | LOOKAHEAD(4) < YEAR > | LOOKAHEAD(3) < DIGIT_3 > | LOOKAHEAD(2) < DIGIT_2 > | < DIGIT >)}
